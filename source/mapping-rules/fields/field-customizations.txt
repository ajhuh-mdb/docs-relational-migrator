.. _rm-field-customizations:

======
Fields
======

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can customize fields when adding or editing your mapping rules. 
Relational Migrator allows you to define custom fields using 
:ref:`rm-calculated-fields`, define custom ids using 
:ref:`rm-id-field-customizations`, or convert your source 
relational column data types into :ref:`a supported BSON data type<rm-field-supported-types>`.

Use Cases
---------

You can use field customization to:

- Include or exclude fields in your mapping rules.
- Change field names.
- Change a source relational datatype to a specific MongoDB BSON datatype.
- Customize ``_id`` fields using JavaScript expressions.
- Customize a field using JavaScript expressions.
- Configure null handling behavior.

Behavior
--------

The Fields section contains a list of fields that are derived from columns 
in the relational table. By default, each column is included in the 
mapping rule. You can uncheck the checkbox to exclude 
that field from your sync job. The field's name will default to the column 
name (with the :ref:`global casing <rm-global-casing>` applied). You 
can modify the name by editing the text box. You can click the 
:icon-fa5:`chevon-left` icon next to each field to reveal additional 
options.

- Relational Migrator assigns a default data type to your MongoDB fields 
  that most closely matches the source column data type. 

- You can view a field's :guilabel:`Original name` and 
  :guilabel:`Original type` when defining customized fields.

- Field customization gives you the ability to change the MongoDB field 
  data type to a different data type to fine-tune your schema.

- :guilabel:`Null Handlings` allow you to specify the behavior 
  of ``Null`` values. You can omit these values or include 
  them in your destination collections.

- Sync jobs that have customized fields which cause errors, continue 
  until the user-defined maximum error threshold gets reached.

.. _rm-field-supported-types:

Supported Data Types
--------------------

Customized fields support the following BSON data types:

- Boolean
- Date
- Decimal
- Double
- Integer
- Long
- String

Relational Migrator automatically selects the BSON type which most 
closely matches the source column type. For most column types, you can
override the field's data type to use a BSON type of your choosing.

Some data type conversions may result in errors in your sync job. For
details, see :ref:`conversion examples<rm-data-type-conversion-guide>`.

.. note::

   For calculated fields, the BSON type is initially shown as 
   :guilabe:`Default`, which means the field type is automatically 
   selected at runtime. You can choose an explicit BSON type, 
   for a calculated field and the type is converted as part of your 
   sync job.

Get Started
-----------

- :ref:`mapping-rules-edit`

Learn More
----------

- :ref:`rm-calculated-fields`
- :ref:`rm-id-field-customizations`
- :ref:`rm-data-type-conversion-guide`

.. toctree::
   :titlesonly:
   :hidden:

   /mapping-rules/fields/data-type-conversion-guide
   /mapping-rules/fields/calculated-fields/calculated-fields