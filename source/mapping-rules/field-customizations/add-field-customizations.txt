.. _rm-add-customized-fields:

=====================
Add Customized Fields
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Relational Migrator assigns a default data type to your MongoDB fields that 
most closely matches the source column data type. Customized fields let 
you choose a custom :ref:`BSON data type <bson-types>` for your MongoDB 
fields. 

Before you Begin
----------------

To create a customized field, you must define a mapping rule.

To create mapping rules, see the following pages:

- :ref:`rm-new-rules-from-mappings`

- :ref:`create-rule-mongodb`

- :ref:`create-rule-relational`

About this Task
---------------

Some data type conversions may result in errors in your sync job. For
example, converting certain ``String`` values to a date. See 
:ref:`rm-field-customization-example` for details.

Steps
-----

#. From the :guilabel:`Mapping` screen, click a table or collection name
   on the :guilabel:`schema model` pane or diagram view.

#. On the :guilabel:`schema model` pane on the right-side of the screen, 
   click the :icon-fa5:`pencil-alt` icon next to a mapping rule.

   .. note::

      You can also customize ``_id`` fields, to customize a ``_id`` field. 
      Click the  :icon-fa5:`ellipsis-v`  icon and select 
      :guilabel:`Transform to calculated field`. Then enter 
      a valid JavaScript expression. Calculated ``_id`` fields **must** 
      evaluate to a unique value.

#. Click the :icon-fa5:`chevron-left` icon next to the field 
   you want to customize.

#. Select a :guilabel:`BSON type`.

#. (Optional) Select a :guilabel:`Null handlings` option.

   - :guilabel:`Omit`, null values are not inserted into your 
     destination collection.
   - :guilabel:`Insert as null`, null values are inserted into the destination
     collection. 

#. (Optional) Enter a new name for the field name.

#. Click :guilabel:`Save and close`.

.. _rm-field-customization-example:

Examples
--------

The following examples show an original value and the results of 
converting the value to a specific BSON data-type using customized 
fields: 

.. list-table::
   :header-rows: 1

   * - Original Value
     - Boolean
     - Date
     - Decimal
     - Double
     - Int32
     - Long
     - String

   * - ``100 (Int32)``
     - ``false``
     - ``Thu Jan 01 10:00:00 AEST 1970``
     - ``100.0``
     - ``100.0``
     - ``100``
     - ``100``
     - ``"100"``

   * - ``true (Boolean)``
     - ``true``
     - ``Thu Jan 01 01:00:00 AEST 1970``
     - ``1.0``
     - ``1.0``
     - ``1``
     - ``1``
     - ``"true"``

   * - ``1233140483647(Long)``
     - ``false``
     - ``Wed Jan 28 22:01:23 AEDT 2009``
     - ``1233140483647.0``
     - ``1233140483647.0``
     - ``Error (Too big)``
     - ``1233140483647``
     - ``"1233140483647"``
   
   * - ``true (String)``
     - ``true``
     - ``Error``
     - ``Error``
     - ``Error``
     - ``Error``
     - ``Error``
     - ``"true"``

Next Steps
----------

- :ref:`rm-view-customized-fields`
- :ref:`rm-edit-customized-fields`
